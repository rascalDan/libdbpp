import feature : feature ;

path-constant me : . ;
feature local-dbppcore : no yes : propagated ;

lib boost_date_time ;
lib boost_system ;
lib boost_utf : : <name>boost_unit_test_framework : :
	<toolset>tidy:<xcheckxx>hicpp-vararg
	<toolset>tidy:<xcheckxx>misc-non-private-member-variables-in-classes
	;
lib Ice++11 ;

run
	testConnection.cpp mockdb.cpp
	: : :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//dbppcore
	<library>..//adhocutil
	<library>boost_utf
	<library>dbpp-local-postgresql
	:
	testConnection
	;

run
	testParse.cpp ..//sqlParse
	: : :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//dbppcore
	<library>..//adhocutil
	<library>boost_utf
	<dependency>commentsMixedIn.sql
	<dependency>indentedStatement.sql
	<dependency>indentedOneLineComment.sql
	<dependency>indentedBlockComment.sql
	<dependency>parseTest.sql
	<dependency>unterminatedComment.sql
	<dependency>unterminatedString.sql
	<dependency>unterminatedDollarQuote.sql
	<dependency>dollarQuote.sql
	<dependency>scriptDir.sql
	<dependency>stringParse.sql
	:
	testParse
	;

alias dbpp-local-mysql : libmysqlpp//dbpp-mysql : <local-dbppcore>yes ;
alias dbpp-local-odbc : libodbcpp//dbpp-odbc : <local-dbppcore>yes ;
alias dbpp-local-postgresql : libpqpp//dbpp-postgresql : <local-dbppcore>yes ;
alias dbpp-local-sqlite : libsqlitepp//dbpp-sqlite : <local-dbppcore>yes ;

run
	testPatch.cpp
	: :
	patch.sql
	source.dat
	target.dat
	:
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//dbppcore
	<library>..//adhocutil
	<library>dbpp-local-postgresql
	<library>boost_utf
	:
	testPatch
	;

run
	testConnectionPool.cpp
	: : :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//dbppcore
	<library>..//adhocutil
	<library>dbpp-local-postgresql
	<library>boost_utf
	:
	testConnectionPool
	;

run
	testUtils.cpp
	: : :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//dbppcore
	<library>..//dbpptestcore
	<library>..//adhocutil
	<library>dbpp-local-postgresql
	<library>boost_utf
	<library>Ice++11
	<dependency>util.sql
	:
	testUtils
	;

run
	testMock.cpp mockdb.cpp
	: : :
	<define>ROOT=\"$(me)\"
	<define>BOOST_TEST_DYN_LINK
	<library>..//dbppcore
	<library>..//adhocutil
	<library>dbpp-local-postgresql
	<library>boost_utf
	<dependency>badMock.sql
	:
	testMock
	;

alias testmysql : libmysqlpp/unittests//testmysql : <local-dbppcore>yes ;
alias testodbc : libodbcpp/unittests//testodbc : <local-dbppcore>yes ;
alias testpq : libpqpp/unittests//testpq : <local-dbppcore>yes ;
alias testsqlite : libsqlitepp/unittests//testsqlite : <local-dbppcore>yes ;

